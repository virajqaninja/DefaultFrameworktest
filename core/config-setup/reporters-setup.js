const SpecReporter = require('jasmine-spec-reporter').SpecReporter;
const configSetup = require('./default-config-setup');
const autoGeneratedFolderName = 'auto-generated';
const TestRailReporter = require('@aurea/aurea-jasmine-testrail-reporter');
let trReporter = null;
let platform = '';
let browserName = '';
const commonConfigSetup = {
    onPrepareSetup() {
        const origFn = browser.driver.controlFlow().execute;
        browser.driver.controlFlow().execute = function() {
            const args = arguments;
            origFn.call(browser.driver.controlFlow(), function() {
                //increase or reduce time value, its in millisecond
                return protractor.promise.delayed(5);
            });
            return origFn.apply(browser.driver.controlFlow(), args);
        };
        const log4js = require('log4js');
        const dateStamp = new Date().toUTCString().replace(/[^A-Z0-9]+/ig, '-').toLowerCase();
        log4js.configure({
            appenders: {
                multi: {
                    type: 'multiFile',
                    base: `${autoGeneratedFolderName}/logs/${(process.env.BUILD_NUMBER || dateStamp)}`,
                    property: 'categoryName',
                    extension: '.log',
                },
            },
            categories: {
                default: { appenders: ['multi'], level: 'all' },
            },
        });

        require('ts-node').register({
            project: 'e2e/tsconfig.e2e.json',
        });

        jasmine.getEnv().addReporter(new SpecReporter({
            spec: {
                displayStacktrace: false,
            },
        }));

        return browser.getCapabilities().then(function(cap) {
            platform = cap.get('platform');
            browserName = cap.get('browserName');
            browser.platform = platform;
            browser.browserName = browserName;
            commonConfigSetup.testRailSetup();
        });
    },
    teamcityReporterSetup: function () {
        const jasmineReporters = require('jasmine-reporters');
        jasmine.getEnv().addReporter(new jasmineReporters.TeamCityReporter());
    },
    allureReporterSetup() {
        const AllureReporter = require('jasmine-allure-reporter');
        const reporter = new AllureReporter({
            resultsDir: autoGeneratedFolderName + '/allure-results',
        });
        jasmine
            .getEnv()
            .addReporter(reporter);

        jasmine.getEnv().afterEach(function(done) {
            browser.takeScreenshot().then(function(png) {
                allure.createAttachment('Screenshot', function() {
                    return new Buffer(png, 'base64');
                }, 'image/png')();
                done();
            });
        });
    },
    testRailSetup: function() {
        trReporter = new TestRailReporter.Reporter(
            configSetup.params.testrail.host,
            configSetup.params.testrail.user, // AdUserName or email Id
            configSetup.params.testrail.password, // Password with Ad Username and Token with email Id
            configSetup.params.testrail.projectId, // Testrail Project Id
            configSetup.params.testrail.versionName, // process.env.version || browser.params.version which can be passed using --params.version
            platform, // e.g. Windows - Linux
            browserName); // e.g. Chrome/Mozilla,
        jasmine.getEnv().addReporter(trReporter);
    },
    testRailSetupOnComplete: function() {
        return trReporter.publishResults()
            .then(results => {
                console.log('Test results are posted to test rail');
            })
            .catch(err => {
                console.log(err.message);
            });

    },
    configureAllReporters: function() {
        commonConfigSetup.allureReporterSetup();
        return commonConfigSetup.onPrepareSetup();
    },
};

module.exports = commonConfigSetup;
